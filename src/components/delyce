// import React, { useState, useEffect } from "react";

// import { useHistory } from "react-router-dom";
// import { useLocation } from "react-router-dom";
// import Notify from '../../functions/Notify';

// import { createRoute, updateRouteInfo, deleteRoute } from '../../redux/actions/RoutesAction'


// function AddRoute(props) {
//   const {routes, createRoute, updateRouteInfo, deleteRoute } = props;
//   const [routeId, setRouteId] = useState('');
//   const [name, setName] = useState("");
//   const onChangeName = (e) => {
//     setName(e.target.value);
//   };
//   const [startLocation, setStartLocation] = useState("");
//   const OnChangeStartLocation = (e) => {
//     setStartLocation(e.target.value);
//   };
//   const [endLocation, setEndlocation] = useState("");
//   const OnChangeEndLocation = (e) => {
//     setEndlocation(e.target.value);
//   };
//   const [distance, setDistance] = useState("");
//   const onChangeDistance = (e) => {
//     setDistance(e.target.value);
//   };
//   const [duration, setDuration] = useState("");
//   const onChangeDuration = (e) => {
//     setDuration(e.target.value);
//   };

//   const {
//     type: routeType,
// } = route;



// const removeModel = () => {
//     let newState = !createRouteModel;
//     setCreateRouteModel(newState);

// }
    
    

//     const createNewRoute = (e) => {
//       e.preventDefault();

//       /* =================================== Start:: validation ================================ */
//       if(name.trim().length == '') return Notify('name field should not be empty', 'error' ) ;
//       if(startLocation.trim().length == '') return Notify('start location field should not be empty', 'error' ) ;
//       if(endLocation.trim().length == '') return Notify('end location field should not be empty', 'error' ) ;
//       if(distance.trim().length == '') return Notify('distance field should not be empty', 'error' ) ;
//       if(duration.trim().length == '') return Notify('duration field should not be empty', 'error' ) ;
      

//       /* =================================== End:: validation ================================ */

//       const newRoute = {
//         name: name,
//       startLocation: startLocation,
//       endLocation: endLocation,
//       distance: distance,
//       duration: duration,
         
//       }
//       createRoute(newRoute);
//       setTimeout(() => {
//           removeModel();
//           setBusId(0)
//           setName("");
//       },
//           2000
//       )
//       return Notify('New Bus have been added', 'success');

//   }
  




//   const location = useLocation();
//   const [edit, setEdit] = useState(null);

//   useEffect(() => {
//     if (location.state) {
//       setEdit(location.state.detail);
//       console.log("location ", location);
//     }
//   }, [location]);

//   useEffect(() => {
//     // update form fields with the edit data
//     if (edit) {
//       setName(edit.name);
//       setStartLocation(edit.startLocation);
//       setEndlocation(edit.endLocation);
//       setDistance(edit.distance);
//       setDuration(edit.duration);
//     }
//   }, [edit]);

//   const history = useHistory();
  

//   const [show, setShow] = useState(true);

 

  

//   const onSubmit = (e) => {
//     if(name.trim().length == '') return Notify('name field should not be empty', 'error' ) ;
//     if(startLocation.trim().length == '') return Notify('start location field should not be empty', 'error' ) ;
//     if(endLocation.trim().length == '') return Notify('end location field should not be empty', 'error' ) ;
//     if(distance.trim().length == '') return Notify('distance field should not be empty', 'error' ) ;
//     if(duration.trim().length == '') return Notify('duration field should not be empty', 'error' ) ;
//     e.preventDefault();
    

//     const values = {
//       name: name,
//       startLocation: startLocation,
//       endLocation: endLocation,
//       distance: distance,
//       duration: duration,
//       id: Math.floor(Math.random() * 100),
//     };
    
//     // save in local storage
//     const alreadyExists = JSON.parse(localStorage.getItem("routes"));
//     console.log("already ", alreadyExists);
//     localStorage.setItem(
//       "routes",
//       alreadyExists
//         ? JSON.stringify([...alreadyExists, values])
//         : JSON.stringify([values])
//     );
//     console.log("values ", values);
//     setShow(false);
//     return Notify('New driver have been added','success') ;   
//   };
//   return (
//     <div>
//       {show && (
//         <div className="bg-white w-full flex flex-col justify-center items-center absolute top-10 sm:top-10 md:left-80  lg:top-20 lg:left-96 z-50  mp:w-8/12  md:w-6/12  xl:w-4/12 2xl:w-3/12 rounded-lg mt-5 pb-8">
//           <div className="card-title w-full text-mainColor flex  flex-wrap justify-center items-center  ">
//             <h3 className="font-bold text-sm text-center w-11/12 text-blue-500">
//               {edit ? "Edit Route" : "Add new route"}
//             </h3>
//             <hr className=" bg-secondary-150 border my-3 w-full" />
//           </div>
//           <div className="card-body flex flex-col items-center  justify-center">
//             <form className="w-5/6" action="">
//               <input
//                 className="bg-gray-100 w-full mt-5 rounded-lg h-10 p-5 focus:outline-none"
//                 type="text"
//                 placeholder="Route name"
//                 value={name}
//                 onChange={onChangeName}
//               />
//               <input
//                 className="bg-gray-100 w-full mt-5 rounded-lg h-10 p-5 focus:outline-none"
//                 type="text"
//                 placeholder="Start location"
//                 value={startLocation}
//                 onChange={OnChangeStartLocation}
//               />
//               <input
//                 className="bg-gray-100 w-full mt-5 rounded-lg h-10 p-5 focus:outline-none"
//                 type="text"
//                 placeholder="Finish location"
//                 value={endLocation}
//                 onChange={OnChangeEndLocation}
//               />
//               <input
//                 className="bg-gray-100 w-full mt-5 rounded-lg h-10 p-5 focus:outline-none"
//                 type="text"
//                 placeholder="Distance"
//                 value={distance}
//                 onChange={onChangeDistance}
//               />
//               <input
//                 className="bg-gray-100 w-full mt-5 rounded-lg h-10 p-5 focus:outline-none"
//                 type="text"
//                 placeholder="Duration"
//                 value={duration}
//                 onChange={onChangeDuration}
//               />
//               <div className="w-full flex justify-between mt-5">
//                 {edit ? (
//                   <div>
//                     <button
//                       className="bg-indigo-300 w-full h-10 rounded-lg text-white font-bold"
//                       onClick={onSubmit}
//                     >
//                       Cancel
//                     </button>
//                     <button
//                       className="bg-indigo-300 w-full h-10 rounded-lg text-white font-bold"
//                       onClick={onSubmit}
//                     >
//                       Update
//                     </button>
//                   </div>
//                 ) : (
//                   <button
//                     className="bg-indigo-300 w-full h-10 rounded-lg text-white font-bold"
//                     onClick={onSubmit}
//                   >
//                     Add
//                   </button>
//                 )}
//               </div>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }
// const mapToState = (state) => {
//   return {
      
//       routes: state.routes
//   }
// }

// export default connect(mapToState, { createRoute, updateRouteInfo, deleteRoute })(AddRoute);
